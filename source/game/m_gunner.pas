{
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

                           Quake 2 Freepascal Port 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


--------------------------------------------------------------------------------
  Contributors:
--------------------------------------------------------------------------------
    Lars aka L505 (started FPC port)
    http://z505.com
    

--------------------------------------------------------------------------------
 Notes regarding freepascal port:
--------------------------------------------------------------------------------

 - see below for delphi notes, conversion notes, and copyright
 
 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
}


{----------------------------------------------------------------------------}
{                                                                            }
{ File(s): game\m_gunner.c                                                   }
{                                                                            }
{ Content: actor animation methods                                           }
{                                                                            }
{ Initial conversion by : Slavisa Milojkovic [keeper@milnet.co.yu]           }
{ Initial conversion on : 08-Apr-2002                                        }
{                                                                            }
{ This File contains part of convertion of Quake2 source to ObjectPascal.    }
{ More information about this project can be found at:                       }
{ http://www.sulaco.co.za/quake2/                                            }
{                                                                            }
{ Copyright (C) 1997-2001 Id Software, Inc.                                  }
{                                                                            }
{ This program is free software; you can redistribute it and/or              }
{ modify it under the terms of the GNU General Public License                }
{ as published by the Free Software Foundation; either version 2             }
{ of the License, or (at your option) any later version.                     }
{                                                                            }
{ This program is distributed in the hope that it will be useful,            }
{ but WITHOUT ANY WARRANTY; without even the implied warranty of             }
{ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                       }
{                                                                            }
{ See the GNU General Public License for more details.                       }
{                                                                            }
{----------------------------------------------------------------------------}
{ Updated on : 3-Mar-2002                                                    }
{----------------------------------------------------------------------------}
{ * Still dependent (to compile correctly) on:                               }
{ - g_local.pas                                                              }
{----------------------------------------------------------------------------}
{ * TODO:                                                                    }
{----------------------------------------------------------------------------}


{
==============================================================================

GUNNER

==============================================================================
}
unit m_gunner;


interface

uses g_local;

// Taken from m_gunner.h
// This file generated by ModelGen - Do NOT Modify

const
  FRAME_stand01           = 0;
  FRAME_stand02           = 1;
  FRAME_stand03           = 2;
  FRAME_stand04           = 3;
  FRAME_stand05           = 4;
  FRAME_stand06           = 5;
  FRAME_stand07           = 6;
  FRAME_stand08           = 7;
  FRAME_stand09           = 8;
  FRAME_stand10           = 9;
  FRAME_stand11           = 10;
  FRAME_stand12           = 11;
  FRAME_stand13           = 12;
  FRAME_stand14           = 13;
  FRAME_stand15           = 14;
  FRAME_stand16           = 15;
  FRAME_stand17           = 16;
  FRAME_stand18           = 17;
  FRAME_stand19           = 18;
  FRAME_stand20           = 19;
  FRAME_stand21           = 20;
  FRAME_stand22           = 21;
  FRAME_stand23           = 22;
  FRAME_stand24           = 23;
  FRAME_stand25           = 24;
  FRAME_stand26           = 25;
  FRAME_stand27           = 26;
  FRAME_stand28           = 27;
  FRAME_stand29           = 28;
  FRAME_stand30           = 29;
  FRAME_stand31           = 30;
  FRAME_stand32           = 31;
  FRAME_stand33           = 32;
  FRAME_stand34           = 33;
  FRAME_stand35           = 34;
  FRAME_stand36           = 35;
  FRAME_stand37           = 36;
  FRAME_stand38           = 37;
  FRAME_stand39           = 38;
  FRAME_stand40           = 39;
  FRAME_stand41           = 40;
  FRAME_stand42           = 41;
  FRAME_stand43           = 42;
  FRAME_stand44           = 43;
  FRAME_stand45           = 44;
  FRAME_stand46           = 45;
  FRAME_stand47           = 46;
  FRAME_stand48           = 47;
  FRAME_stand49           = 48;
  FRAME_stand50           = 49;
  FRAME_stand51           = 50;
  FRAME_stand52           = 51;
  FRAME_stand53           = 52;
  FRAME_stand54           = 53;
  FRAME_stand55           = 54;
  FRAME_stand56           = 55;
  FRAME_stand57           = 56;
  FRAME_stand58           = 57;
  FRAME_stand59           = 58;
  FRAME_stand60           = 59;
  FRAME_stand61           = 60;
  FRAME_stand62           = 61;
  FRAME_stand63           = 62;
  FRAME_stand64           = 63;
  FRAME_stand65           = 64;
  FRAME_stand66           = 65;
  FRAME_stand67           = 66;
  FRAME_stand68           = 67;
  FRAME_stand69           = 68;
  FRAME_stand70           = 69;
  FRAME_walk01            = 70;
  FRAME_walk02            = 71;
  FRAME_walk03            = 72;
  FRAME_walk04            = 73;
  FRAME_walk05            = 74;
  FRAME_walk06            = 75;
  FRAME_walk07            = 76;
  FRAME_walk08            = 77;
  FRAME_walk09            = 78;
  FRAME_walk10            = 79;
  FRAME_walk11            = 80;
  FRAME_walk12            = 81;
  FRAME_walk13            = 82;
  FRAME_walk14            = 83;
  FRAME_walk15            = 84;
  FRAME_walk16            = 85;
  FRAME_walk17            = 86;
  FRAME_walk18            = 87;
  FRAME_walk19            = 88;
  FRAME_walk20            = 89;
  FRAME_walk21            = 90;
  FRAME_walk22            = 91;
  FRAME_walk23            = 92;
  FRAME_walk24            = 93;
  FRAME_run01             = 94;
  FRAME_run02             = 95;
  FRAME_run03             = 96;
  FRAME_run04             = 97;
  FRAME_run05             = 98;
  FRAME_run06             = 99;
  FRAME_run07             = 100;
  FRAME_run08             = 101;
  FRAME_runs01            = 102;
  FRAME_runs02            = 103;
  FRAME_runs03            = 104;
  FRAME_runs04            = 105;
  FRAME_runs05            = 106;
  FRAME_runs06            = 107;
  FRAME_attak101          = 108;
  FRAME_attak102          = 109;
  FRAME_attak103          = 110;
  FRAME_attak104          = 111;
  FRAME_attak105          = 112;
  FRAME_attak106          = 113;
  FRAME_attak107          = 114;
  FRAME_attak108          = 115;
  FRAME_attak109          = 116;
  FRAME_attak110          = 117;
  FRAME_attak111          = 118;
  FRAME_attak112          = 119;
  FRAME_attak113          = 120;
  FRAME_attak114          = 121;
  FRAME_attak115          = 122;
  FRAME_attak116          = 123;
  FRAME_attak117          = 124;
  FRAME_attak118          = 125;
  FRAME_attak119          = 126;
  FRAME_attak120          = 127;
  FRAME_attak121          = 128;
  FRAME_attak201          = 129;
  FRAME_attak202          = 130;
  FRAME_attak203          = 131;
  FRAME_attak204          = 132;
  FRAME_attak205          = 133;
  FRAME_attak206          = 134;
  FRAME_attak207          = 135;
  FRAME_attak208          = 136;
  FRAME_attak209          = 137;
  FRAME_attak210          = 138;
  FRAME_attak211          = 139;
  FRAME_attak212          = 140;
  FRAME_attak213          = 141;
  FRAME_attak214          = 142;
  FRAME_attak215          = 143;
  FRAME_attak216          = 144;
  FRAME_attak217          = 145;
  FRAME_attak218          = 146;
  FRAME_attak219          = 147;
  FRAME_attak220          = 148;
  FRAME_attak221          = 149;
  FRAME_attak222          = 150;
  FRAME_attak223          = 151;
  FRAME_attak224          = 152;
  FRAME_attak225          = 153;
  FRAME_attak226          = 154;
  FRAME_attak227          = 155;
  FRAME_attak228          = 156;
  FRAME_attak229          = 157;
  FRAME_attak230          = 158;
  FRAME_pain101           = 159;
  FRAME_pain102           = 160;
  FRAME_pain103           = 161;
  FRAME_pain104           = 162;
  FRAME_pain105           = 163;
  FRAME_pain106           = 164;
  FRAME_pain107           = 165;
  FRAME_pain108           = 166;
  FRAME_pain109           = 167;
  FRAME_pain110           = 168;
  FRAME_pain111           = 169;
  FRAME_pain112           = 170;
  FRAME_pain113           = 171;
  FRAME_pain114           = 172;
  FRAME_pain115           = 173;
  FRAME_pain116           = 174;
  FRAME_pain117           = 175;
  FRAME_pain118           = 176;
  FRAME_pain201           = 177;
  FRAME_pain202           = 178;
  FRAME_pain203           = 179;
  FRAME_pain204           = 180;
  FRAME_pain205           = 181;
  FRAME_pain206           = 182;
  FRAME_pain207           = 183;
  FRAME_pain208           = 184;
  FRAME_pain301           = 185;
  FRAME_pain302           = 186;
  FRAME_pain303           = 187;
  FRAME_pain304           = 188;
  FRAME_pain305           = 189;
  FRAME_death01           = 190;
  FRAME_death02           = 191;
  FRAME_death03           = 192;
  FRAME_death04           = 193;
  FRAME_death05           = 194;
  FRAME_death06           = 195;
  FRAME_death07           = 196;
  FRAME_death08           = 197;
  FRAME_death09           = 198;
  FRAME_death10           = 199;
  FRAME_death11           = 200;
  FRAME_duck01            = 201;
  FRAME_duck02            = 202;
  FRAME_duck03            = 203;
  FRAME_duck04            = 204;
  FRAME_duck05            = 205;
  FRAME_duck06            = 206;
  FRAME_duck07            = 207;
  FRAME_duck08            = 208;

  MODEL_SCALE    = 1.150000;

procedure gunner_stand (self: edict_p); cdecl;
procedure gunner_fire_chain(self: edict_p); cdecl;
procedure GunnerGrenade (self: edict_p); cdecl;

procedure SP_monster_gunner(self: edict_p); cdecl;

implementation

uses g_main, q_shared, g_ai, g_local_add, GameUnit, g_misc, g_utils,
  m_flash, g_monster, game_add, CPas;

var
  sound_pain,
  sound_pain2,
  sound_death,
  sound_idle,
  sound_open,
  sound_search,
  sound_sight: integer;


procedure gunner_idlesound (self: edict_p); cdecl;
begin
  gi.sound (self, CHAN_VOICE, sound_idle, 1, ATTN_IDLE, 0);
end;

procedure gunner_sight (self, other: edict_p); cdecl;
begin
  gi.sound (self, CHAN_VOICE, sound_sight, 1, ATTN_NORM, 0);
end;

procedure gunner_search (self: edict_p); cdecl;
begin
  gi.sound (self, CHAN_VOICE, sound_search, 1, ATTN_NORM, 0);
end;

{visible := function(self, other: edict_t): qboolean; cdecl;
GunnerGrenade := procedure(self: edict_t); cdecl;
GunnerFire := procedure(self: edict_t); cdecl;
gunner_fire_chain := procedure(self: edict_t); cdecl;
gunner_refire_chain := procedure(self: edict_t); cdecl;


gunner_stand := procedure(self: edict_t); cdecl;}
const
gunner_frames_fidget: array[0..48] of mframe_t =
(
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:gunner_idlesound),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),

  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),

  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),

  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),

  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil),
  (aifunc: ai_stand; dist: 0; thinkfunc:nil)
);

const
  gunner_move_fidget: mmove_t = (firstframe:FRAME_stand31; lastframe: FRAME_stand70; frame:@gunner_frames_fidget; endfunc: gunner_stand);

procedure gunner_fidget (self: edict_p); cdecl;
begin
  if (self.monsterinfo.aiflags and AI_STAND_GROUND) <> 0 then
    exit;
  if (_random() <= 0.05) then
    self.monsterinfo.currentmove := @gunner_move_fidget;
end;

const
  gunner_frames_stand: array[0..29] of mframe_t =
(
  (aifunc: ai_stand; dist: 0; thinkfunc: nil),
  (aifunc: ai_stand; dist: 0; thinkfunc: nil),
  (aifunc: ai_stand; dist: 0; thinkfunc: nil),
  (aifunc: ai_stand; dist: 0; thinkfunc: nil),
  (aifunc: ai_stand; dist: 0; thinkfunc: nil),
  (aifunc: ai_stand; dist: 0; thinkfunc: nil),
  (aifunc: ai_stand; dist: 0; thinkfunc: nil),
  (aifunc: ai_stand; dist: 0; thinkfunc: nil),
  (aifunc: ai_stand; dist: 0; thinkfunc: nil),
  (aifunc: ai_stand; dist: 0; thinkfunc: gunner_fidget),

  (aifunc: ai_stand; dist: 0; thinkfunc: nil),
  (aifunc: ai_stand; dist: 0; thinkfunc: nil),
  (aifunc: ai_stand; dist: 0; thinkfunc: nil),
  (aifunc: ai_stand; dist: 0; thinkfunc: nil),
  (aifunc: ai_stand; dist: 0; thinkfunc: nil),
  (aifunc: ai_stand; dist: 0; thinkfunc: nil),
  (aifunc: ai_stand; dist: 0; thinkfunc: nil),
  (aifunc: ai_stand; dist: 0; thinkfunc: nil),
  (aifunc: ai_stand; dist: 0; thinkfunc: nil),
  (aifunc: ai_stand; dist: 0; thinkfunc: gunner_fidget),

  (aifunc: ai_stand; dist: 0; thinkfunc: nil),
  (aifunc: ai_stand; dist: 0; thinkfunc: nil),
  (aifunc: ai_stand; dist: 0; thinkfunc: nil),
  (aifunc: ai_stand; dist: 0; thinkfunc: nil),
  (aifunc: ai_stand; dist: 0; thinkfunc: nil),
  (aifunc: ai_stand; dist: 0; thinkfunc: nil),
  (aifunc: ai_stand; dist: 0; thinkfunc: nil),
  (aifunc: ai_stand; dist: 0; thinkfunc: nil),
  (aifunc: ai_stand; dist: 0; thinkfunc: nil),
  (aifunc: ai_stand; dist: 0; thinkfunc: gunner_fidget)
);

const
  gunner_move_stand: mmove_t = (firstframe:FRAME_stand01; lastframe: FRAME_stand30; frame:@gunner_frames_stand; endfunc:nil);

procedure gunner_stand (self: edict_p);
begin
    self.monsterinfo.currentmove := @gunner_move_stand;
end;

const
  gunner_frames_walk: array[0..12] of mframe_t =
(
  (aifunc: ai_walk; dist: 0; thinkfunc: nil),
  (aifunc: ai_walk; dist: 3; thinkfunc: nil),
  (aifunc: ai_walk; dist: 4; thinkfunc: nil),
  (aifunc: ai_walk; dist: 5; thinkfunc: nil),
  (aifunc: ai_walk; dist: 7; thinkfunc: nil),
  (aifunc: ai_walk; dist: 2; thinkfunc: nil),
  (aifunc: ai_walk; dist: 6; thinkfunc: nil),
  (aifunc: ai_walk; dist: 4; thinkfunc: nil),
  (aifunc: ai_walk; dist: 2; thinkfunc: nil),
  (aifunc: ai_walk; dist: 7; thinkfunc: nil),
  (aifunc: ai_walk; dist: 5; thinkfunc: nil),
  (aifunc: ai_walk; dist: 7; thinkfunc: nil),
  (aifunc: ai_walk; dist: 4; thinkfunc: nil)
);

const
  gunner_move_walk: mmove_t = (firstframe:FRAME_walk07; lastframe: FRAME_walk19; frame:@gunner_frames_walk; endfunc:nil);

procedure gunner_walk (self: edict_p); cdecl;
begin
  self.monsterinfo.currentmove := @gunner_move_walk;
end;

const
  gunner_frames_run: array[0..7] of mframe_t =
(
  (aifunc: ai_run; dist: 26; thinkfunc: nil),
  (aifunc: ai_run; dist: 9; thinkfunc: nil),
  (aifunc: ai_run; dist: 9; thinkfunc: nil),
  (aifunc: ai_run; dist: 9; thinkfunc: nil),
  (aifunc: ai_run; dist: 15; thinkfunc: nil),
  (aifunc: ai_run; dist: 10; thinkfunc: nil),
  (aifunc: ai_run; dist: 13; thinkfunc: nil),
  (aifunc: ai_run; dist: 6; thinkfunc: nil)
);

const
  gunner_move_run: mmove_t = (firstframe:FRAME_run01; lastframe: FRAME_run08; frame: @gunner_frames_run; endfunc:nil);

procedure gunner_run (self: edict_p); cdecl;
begin
  if (self.monsterinfo.aiflags and AI_STAND_GROUND) <> 0 then
    self.monsterinfo.currentmove := @gunner_move_stand
  else
    self.monsterinfo.currentmove := @gunner_move_run;
end;

const
  gunner_frames_runandshoot: array[0..5] of mframe_t =
(
  (aifunc: ai_run; dist: 32; thinkfunc: nil),
  (aifunc: ai_run; dist: 15; thinkfunc: nil),
  (aifunc: ai_run; dist: 10; thinkfunc: nil),
  (aifunc: ai_run; dist: 18; thinkfunc: nil),
  (aifunc: ai_run; dist: 8; thinkfunc: nil),
  (aifunc: ai_run; dist: 20; thinkfunc: nil)
);

const
  gunner_move_runandshoot: mmove_t = (firstframe:FRAME_runs01; lastframe: FRAME_runs06; frame:@gunner_frames_runandshoot; endfunc:nil);

procedure gunner_runandshoot (self: edict_p);
begin
  self.monsterinfo.currentmove := @gunner_move_runandshoot;
end;

const
  gunner_frames_pain3: array[0..4] of mframe_t =
(
  (aifunc: ai_move; dist: -3; thinkfunc: nil),
  (aifunc: ai_move; dist: 1; thinkfunc: nil),
  (aifunc: ai_move; dist: 1; thinkfunc: nil),
  (aifunc: ai_move; dist: 0; thinkfunc: nil),
  (aifunc: ai_move; dist: 1; thinkfunc: nil)
);

const
  gunner_move_pain3: mmove_t = (firstframe:FRAME_pain301; lastframe:FRAME_pain305; frame:@gunner_frames_pain3; endfunc:gunner_run);

const
  gunner_frames_pain2: array[0..7] of mframe_t =
(
  (aifunc: ai_move; dist: -2; thinkfunc: nil),
  (aifunc: ai_move; dist: 11; thinkfunc: nil),
  (aifunc: ai_move; dist: 6; thinkfunc: nil),
  (aifunc: ai_move; dist: 2; thinkfunc: nil),
  (aifunc: ai_move; dist: -1; thinkfunc: nil),
  (aifunc: ai_move; dist: -7; thinkfunc: nil),
  (aifunc: ai_move; dist: -2; thinkfunc: nil),
  (aifunc: ai_move; dist: -7; thinkfunc: nil)
);

const
  gunner_move_pain2: mmove_t = (firstframe:FRAME_pain201; lastframe:FRAME_pain208; frame:@gunner_frames_pain2; endfunc:gunner_run);

const
  gunner_frames_pain1: array[0..17] of mframe_t =
(
  (aifunc:ai_move; dist: 2; thinkfunc:nil),
  (aifunc:ai_move; dist: 0; thinkfunc:nil),
  (aifunc:ai_move; dist: -5; thinkfunc:nil),
  (aifunc:ai_move; dist: 3; thinkfunc:nil),
  (aifunc:ai_move; dist: -1; thinkfunc:nil),
  (aifunc:ai_move; dist: 0; thinkfunc:nil),
  (aifunc:ai_move; dist: 0; thinkfunc:nil),
  (aifunc:ai_move; dist: 0; thinkfunc:nil),
  (aifunc:ai_move; dist: 0; thinkfunc:nil),
  (aifunc:ai_move; dist: 1; thinkfunc:nil),
  (aifunc:ai_move; dist: 1; thinkfunc:nil),
  (aifunc:ai_move; dist: 2; thinkfunc:nil),
  (aifunc:ai_move; dist: 1; thinkfunc:nil),
  (aifunc:ai_move; dist: 0; thinkfunc:nil),
  (aifunc:ai_move; dist: -2; thinkfunc:nil),
  (aifunc:ai_move; dist: -2; thinkfunc:nil),
  (aifunc:ai_move; dist: 0; thinkfunc:nil),
  (aifunc:ai_move; dist: 0; thinkfunc:nil)
);

gunner_move_pain1: mmove_t = (firstframe:FRAME_pain101; lastframe:FRAME_pain118; frame:@gunner_frames_pain1; endfunc:gunner_run);

procedure gunner_pain (self, other: edict_p; kick: single; damage: integer); cdecl;
begin
  if self.health < (self.max_health / 2) then
    self.s.skinnum := 1;

  if level.time < self.pain_debounce_time then
    exit;

  self.pain_debounce_time := level.time + 3;

  if (rand() and 1) <> 0 then
    gi.sound (self, CHAN_VOICE, sound_pain, 1, ATTN_NORM, 0)
  else
    gi.sound (self, CHAN_VOICE, sound_pain2, 1, ATTN_NORM, 0);

  if skill.value = 3 then
    exit;    // no pain anims in nightmare

  if damage <= 10 then
    self.monsterinfo.currentmove := @gunner_move_pain3
  else if damage <= 25 then
    self.monsterinfo.currentmove := @gunner_move_pain2
  else
    self.monsterinfo.currentmove := @gunner_move_pain1;
end;

procedure gunner_dead (self: edict_p); cdecl;
begin
  VectorSet (self.mins, -16, -16, -24);
  VectorSet (self.maxs, 16, 16, -8);
  self.movetype := MOVETYPE_TOSS;
  self.svflags := self.svflags or SVF_DEADMONSTER;
  self.nextthink := 0;
  gi.linkentity (self);
end;

const
  gunner_frames_death: array[0..10] of mframe_t =
(
  (aifunc:ai_move; dist: 0; thinkfunc:nil),
  (aifunc:ai_move; dist: 0; thinkfunc:nil),
  (aifunc:ai_move; dist: 0; thinkfunc:nil),
  (aifunc:ai_move; dist: -7; thinkfunc:nil),
  (aifunc:ai_move; dist: -3; thinkfunc:nil),
  (aifunc:ai_move; dist: -5; thinkfunc:nil),
  (aifunc:ai_move; dist: 8; thinkfunc:nil),
  (aifunc:ai_move; dist: 6; thinkfunc:nil),
  (aifunc:ai_move; dist: 0; thinkfunc:nil),
  (aifunc:ai_move; dist: 0; thinkfunc:nil),
  (aifunc:ai_move; dist: 0; thinkfunc:nil)
);

const
  gunner_move_death: mmove_t = (firstframe:FRAME_death01; lastframe:FRAME_death11; frame:@gunner_frames_death; endfunc:gunner_dead);

procedure gunner_die (self, inflictor, attacker: edict_p; damage: integer; const point: vec3_t); cdecl;
  var n: integer;
begin
// check for gib
  if self.health <= self.gib_health then
  begin
    gi.sound (self, CHAN_VOICE, gi.soundindex ('misc/udeath.wav'), 1, ATTN_NORM, 0);
    for n := 0 to 1 do
      ThrowGib (self, 'models/objects/gibs/bone/tris.md2', damage, GIB_ORGANIC);
    for n := 0 to 3 do
      ThrowGib (self, 'models/objects/gibs/sm_meat/tris.md2', damage, GIB_ORGANIC);
    ThrowHead (self, 'models/objects/gibs/head2/tris.md2', damage, GIB_ORGANIC);
    self.deadflag := DEAD_DEAD;
    exit;
  end;

  if self.deadflag = DEAD_DEAD then Exit;

// regular death
  gi.sound (self, CHAN_VOICE, sound_death, 1, ATTN_NORM, 0);
  self.deadflag := DEAD_DEAD;
  self.takedamage := DAMAGE_YES;
  self.monsterinfo.currentmove := @gunner_move_death;
end;


procedure gunner_duck_down (self: edict_p); cdecl;
begin
  if self.monsterinfo.aiflags and AI_DUCKED <> 0 then
    Exit;

  self.monsterinfo.aiflags := self.monsterinfo.aiflags or AI_DUCKED;
  if skill.value >= 2 then
  begin
    if _random() > 0.5 then
      GunnerGrenade (self);
  end;

  self.maxs[2] := self.maxs[2] - 32;
  self.takedamage := DAMAGE_YES;
  self.monsterinfo.pausetime := level.time + 1;
  gi.linkentity (self);
end;

procedure gunner_duck_hold (self: edict_p); cdecl;
begin
  if level.time >= self.monsterinfo.pausetime then
    self.monsterinfo.aiflags := self.monsterinfo.aiflags and not AI_HOLD_FRAME
  else
    self.monsterinfo.aiflags := self.monsterinfo.aiflags or AI_HOLD_FRAME;
end;

procedure gunner_duck_up (self: edict_p); cdecl;
begin
  self.monsterinfo.aiflags := self.monsterinfo.aiflags and not AI_DUCKED;
  self.maxs[2] := self.maxs[2] + 32;
  self.takedamage := DAMAGE_AIM;
  gi.linkentity (self);
end;

const
  gunner_frames_duck: array[0..7] of mframe_t =
(
  (aifunc:ai_move; dist: 1; thinkfunc:gunner_duck_down),
  (aifunc:ai_move; dist: 1; thinkfunc:nil),
  (aifunc:ai_move; dist: 1; thinkfunc:gunner_duck_hold),
  (aifunc:ai_move; dist: 0; thinkfunc:nil),
  (aifunc:ai_move; dist: -1; thinkfunc:nil),
  (aifunc:ai_move; dist: -1; thinkfunc:nil),
  (aifunc:ai_move; dist: 0; thinkfunc:gunner_duck_up),
  (aifunc:ai_move; dist: -1; thinkfunc:nil)
);
  gunner_move_duck: mmove_t = (firstframe:FRAME_duck01; lastframe:FRAME_duck08; frame:@gunner_frames_duck; endfunc:gunner_run);

procedure gunner_dodge (self, attacker: edict_p; eta: single); cdecl;
begin
  if _random() > 0.25 then
    Exit;

  if self.enemy = nil then
    self.enemy := attacker;

  self.monsterinfo.currentmove := @gunner_move_duck;
end;


procedure gunner_opengun (self: edict_p); cdecl;
begin
  gi.sound (self, CHAN_VOICE, sound_open, 1, ATTN_IDLE, 0);
end;

procedure GunnerFire (self: edict_p); cdecl;
var
  start,
  forward, right,
  target, aim: vec3_t;
  flash_number: Integer;
begin
  flash_number := MZ2_GUNNER_MACHINEGUN_1 + (self.s.frame - FRAME_attak216);

  AngleVectors (self.s.angles, @forward, @right, nil);
  G_ProjectSource (self.s.origin, monster_flash_offset[flash_number], forward, right, start);

  // project enemy back a bit and target there
  VectorCopy (self.enemy.s.origin, target);
  VectorMA (target, -0.2, self.enemy.velocity, target);
  target[2] := target[2] + self.enemy.viewheight;

  VectorSubtract (target, start, aim);
  VectorNormalize (aim);
  monster_fire_bullet (self, start, aim, 3, 4, DEFAULT_BULLET_HSPREAD, DEFAULT_BULLET_VSPREAD, flash_number);
end;

procedure GunnerGrenade (self: edict_p);
var
  start,
  forward, right, aim: vec3_t;
  flash_number: integer;
begin

  if (Self.s.frame = FRAME_attak105) then
    flash_number := MZ2_GUNNER_GRENADE_1
  else if (Self.s.frame = FRAME_attak108) then
    flash_number := MZ2_GUNNER_GRENADE_2
  else if (Self.s.frame = FRAME_attak111) then
    flash_number := MZ2_GUNNER_GRENADE_3
  else // (self.s.frame = FRAME_attak114)
    flash_number := MZ2_GUNNER_GRENADE_4;

  AngleVectors (self.s.angles, @forward, @right, nil);
  G_ProjectSource (self.s.origin, monster_flash_offset[flash_number], forward, right, start);

  //FIXME : do a spread -225 -75 75 225 degrees around forward
  VectorCopy (forward, aim);

  monster_fire_grenade (self, start, aim, 50, 600, flash_number);
end;

const
  gunner_frames_attack_chain : array[0..6] of mframe_t =
(
  (*
  ai_chacrge, 0, nil,
  ai_charge, 0, nil,
  ai_charge, 0, nil,
  ai_charge, 0, nil,
  ai_charge, 0, nil,
  ai_charge, 0, nil,
  ai_charge, 0, nil,
  ai_charge, 0, nil,
  *)
  (aifunc:ai_charge; dist:0; thinkfunc:gunner_opengun),
  (aifunc:ai_charge; dist:0; thinkfunc:nil),
  (aifunc:ai_charge; dist:0; thinkfunc:nil),
  (aifunc:ai_charge; dist:0; thinkfunc:nil),
  (aifunc:ai_charge; dist:0; thinkfunc:nil),
  (aifunc:ai_charge; dist:0; thinkfunc:nil),
  (aifunc:ai_charge; dist:0; thinkfunc:nil)
);
  gunner_move_attack_chain: mmove_t = (firstframe:FRAME_attak209; lastframe:FRAME_attak215; frame:@gunner_frames_attack_chain; endfunc:gunner_fire_chain);

  gunner_frames_fire_chain : array[0..7] of mframe_t=
(
  (aifunc:ai_charge; dist:0; thinkfunc:GunnerFire),
  (aifunc:ai_charge; dist:0; thinkfunc:GunnerFire),
  (aifunc:ai_charge; dist:0; thinkfunc:GunnerFire),
  (aifunc:ai_charge; dist:0; thinkfunc:GunnerFire),
  (aifunc:ai_charge; dist:0; thinkfunc:GunnerFire),
  (aifunc:ai_charge; dist:0; thinkfunc:GunnerFire),
  (aifunc:ai_charge; dist:0; thinkfunc:GunnerFire),
  (aifunc:ai_charge; dist:0; thinkfunc:GunnerFire)
);
  gunner_move_fire_chain: mmove_t = (firstframe:FRAME_attak216; lastframe:FRAME_attak223; frame:@gunner_frames_fire_chain; endfunc:gunner_fire_chain);

  gunner_frames_endfire_chain : array[0..6] of mframe_t=
(
  (aifunc:ai_charge; dist:0; thinkfunc:nil),
  (aifunc:ai_charge; dist:0; thinkfunc:nil),
  (aifunc:ai_charge; dist:0; thinkfunc:nil),
  (aifunc:ai_charge; dist:0; thinkfunc:nil),
  (aifunc:ai_charge; dist:0; thinkfunc:nil),
  (aifunc:ai_charge; dist:0; thinkfunc:nil),
  (aifunc:ai_charge; dist:0; thinkfunc:nil)
);
  gunner_move_endfire_chain: mmove_t = (firstframe:FRAME_attak224; lastframe:FRAME_attak230; frame:@gunner_frames_endfire_chain; endfunc:gunner_run);

  gunner_frames_attack_grenade : array[0..20] of mframe_t=
(
  (aifunc:ai_charge; dist:0; thinkfunc:nil),
  (aifunc:ai_charge; dist:0; thinkfunc:nil),
  (aifunc:ai_charge; dist:0; thinkfunc:nil),
  (aifunc:ai_charge; dist:0; thinkfunc:nil),
  (aifunc:ai_charge; dist:0; thinkfunc:GunnerGrenade),
  (aifunc:ai_charge; dist:0; thinkfunc:nil),
  (aifunc:ai_charge; dist:0; thinkfunc:nil),
  (aifunc:ai_charge; dist:0; thinkfunc:GunnerGrenade),
  (aifunc:ai_charge; dist:0; thinkfunc:nil),
  (aifunc:ai_charge; dist:0; thinkfunc:nil),
  (aifunc:ai_charge; dist:0; thinkfunc:GunnerGrenade),
  (aifunc:ai_charge; dist:0; thinkfunc:nil),
  (aifunc:ai_charge; dist:0; thinkfunc:nil),
  (aifunc:ai_charge; dist:0; thinkfunc:GunnerGrenade),
  (aifunc:ai_charge; dist:0; thinkfunc:nil),
  (aifunc:ai_charge; dist:0; thinkfunc:nil),
  (aifunc:ai_charge; dist:0; thinkfunc:nil),
  (aifunc:ai_charge; dist:0; thinkfunc:nil),
  (aifunc:ai_charge; dist:0; thinkfunc:nil),
  (aifunc:ai_charge; dist:0; thinkfunc:nil),
  (aifunc:ai_charge; dist:0; thinkfunc:nil)
);
  gunner_move_attack_grenade: mmove_t = (firstframe:FRAME_attak101; lastframe:FRAME_attak121; frame:@gunner_frames_attack_grenade; endfunc:gunner_run);

procedure gunner_attack(self: edict_p); cdecl;
begin
  if (range (self, self.enemy) = RANGE_MELEE) then
  begin
    self.monsterinfo.currentmove := @gunner_move_attack_chain;
  end
  else
  begin
    if (_random() <= 0.5) then
      self.monsterinfo.currentmove := @gunner_move_attack_grenade
    else
      self.monsterinfo.currentmove := @gunner_move_attack_chain;
  end;
end;

procedure gunner_fire_chain(self: edict_p);
begin
  self.monsterinfo.currentmove := @gunner_move_fire_chain;
end;

procedure gunner__chain(self: edict_p);
begin
  if (self.enemy.health > 0) then
    if ( visible (self, self.enemy) ) then
      if (_random() <= 0.5) then
      begin
        self.monsterinfo.currentmove := @gunner_move_fire_chain;
        Exit;
      end;
  self.monsterinfo.currentmove := @gunner_move_endfire_chain;
end;

// QUAKED monster_gunner (1 .5 0) (-16 -16 -24) (16 16 32) Ambush Trigger_Spawn Sight

procedure SP_monster_gunner(self: edict_p);
begin
  if (deathmatch.Value <> 0) then
  begin
    G_FreeEdict (self);
    exit;
  end;

  sound_death := gi.soundindex ('gunner/death1.wav');
  sound_pain := gi.soundindex ('gunner/gunpain2.wav');
  sound_pain2 := gi.soundindex ('gunner/gunpain1.wav');
  sound_idle := gi.soundindex ('gunner/gunidle1.wav');
  sound_open := gi.soundindex ('gunner/gunatck1.wav');
  sound_search := gi.soundindex ('gunner/gunsrch1.wav');
  sound_sight := gi.soundindex ('gunner/sight1.wav');

  gi.soundindex ('gunner/gunatck2.wav');
  gi.soundindex ('gunner/gunatck3.wav');

  self.movetype := MOVETYPE_STEP;
  self.solid := SOLID_BBOX;
  self.s.modelindex := gi.modelindex ('models/monsters/gunner/tris.md2');
  VectorSet (self.mins, -16, -16, -24);
  VectorSet (self.maxs, 16, 16, 32);

  self.health := 175;
  self.gib_health := -70;
  self.mass := 200;

  self.pain := gunner_pain;
  self.die := gunner_die;

  self.monsterinfo.stand := gunner_stand;
  self.monsterinfo.walk := gunner_walk;
  self.monsterinfo.run := gunner_run;
  self.monsterinfo.dodge := gunner_dodge;
  self.monsterinfo.attack := gunner_attack;
  self.monsterinfo.melee := nil;
  self.monsterinfo.sight := gunner_sight;
  self.monsterinfo.search := gunner_search;

  gi.linkentity (self);

  self.monsterinfo.currentmove := @gunner_move_stand;
  Self.monsterinfo.scale := MODEL_SCALE;

  walkmonster_start (self);
end;

end.
