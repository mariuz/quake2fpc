{
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

                           Quake 2 Freepascal Port 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


--------------------------------------------------------------------------------
  Contributors:
--------------------------------------------------------------------------------
    Lars aka L505 (started FPC port)
    http://z505.com
    

--------------------------------------------------------------------------------
 Notes regarding freepascal port:
--------------------------------------------------------------------------------

 - see below for delphi notes, conversion notes, and copyright
 
 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
}


{----------------------------------------------------------------------------}
{                                                                            }
{ File(s): m_insane.c, m_insane.h                                            }
{ Content: insane                                                            }
{                                                                            }
{ Initial conversion by : MathD (matheus@tilt.net)                           }
{ Initial conversion on : 04-Mar-2002                                        }
{                                                                            }
{ This File contains part of convertion of Quake2 source to ObjectPascal.    }
{ More information about this project can be found at:                       }
{ http://www.sulaco.co.za/quake2/                                            }
{                                                                            }
{ Copyright (C) 1997-2001 Id Software, Inc.                                  }
{                                                                            }
{ This program is free software; you can redistribute it and/or              }
{ modify it under the terms of the GNU General Public License                }
{ as published by the Free Software Foundation; either version 2             }
{ of the License, or (at your option) any later version.                     }
{                                                                            }
{ This program is distributed in the hope that it will be useful,            }
{ but WITHOUT ANY WARRANTY; without even the implied warranty of             }
{ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                       }
{                                                                            }
{ See the GNU General Public License for more details.                       }
{                                                                            }
{----------------------------------------------------------------------------}
{ Updated on :                                                               }
{ Updated by :                                                               }
{                                                                            }
{----------------------------------------------------------------------------}
{ * Still dependent (to compile correctly) on:                               }
{ none                                                                       }
{----------------------------------------------------------------------------}
{ * TODO:                                                                    }
{  The constant structures of m_insane.c (lines 68 to 433)                   }
{                                                                            }
{----------------------------------------------------------------------------}
{ * NOTES:                                                                   }
{ translated the pointers to records as specified in message board           }
{ edict_p = record;                                                          }
{ editc_p = ^edict_p                                                         }
{----------------------------------------------------------------------------}

unit m_insane;

interface

uses
  g_local,
  q_shared_add;

{delphi-note: constants defined in m_insane.h}
// G:\quake2\baseq2\models/monsters/insane
// This file generated by ModelGen - Do NOT Modify
const FRAME_stand1      = 0;
      FRAME_stand2      = 1;
      FRAME_stand3      = 2;
      FRAME_stand4      = 3;
      FRAME_stand5      = 4;
      FRAME_stand6      = 5;
      FRAME_stand7      = 6;
      FRAME_stand8      = 7;
      FRAME_stand9      = 8;
      FRAME_stand10     = 9;
      FRAME_stand11     = 10;
      FRAME_stand12     = 11;
      FRAME_stand13     = 12;
      FRAME_stand14     = 13;
      FRAME_stand15     = 14;
      FRAME_stand16     = 15;
      FRAME_stand17     = 16;
      FRAME_stand18     = 17;
      FRAME_stand19     = 18;
      FRAME_stand20     = 19;
      FRAME_stand21     = 20;
      FRAME_stand22     = 21;
      FRAME_stand23     = 22;
      FRAME_stand24     = 23;
      FRAME_stand25     = 24;
      FRAME_stand26     = 25;
      FRAME_stand27     = 26;
      FRAME_stand28     = 27;
      FRAME_stand29     = 28;
      FRAME_stand30     = 29;
      FRAME_stand31     = 30;
      FRAME_stand32     = 31;
      FRAME_stand33     = 32;
      FRAME_stand34     = 33;
      FRAME_stand35     = 34;
      FRAME_stand36     = 35;
      FRAME_stand37     = 36;
      FRAME_stand38     = 37;
      FRAME_stand39     = 38;
      FRAME_stand40     = 39;
      FRAME_stand41     = 40;
      FRAME_stand42     = 41;
      FRAME_stand43     = 42;
      FRAME_stand44     = 43;
      FRAME_stand45     = 44;
      FRAME_stand46     = 45;
      FRAME_stand47     = 46;
      FRAME_stand48     = 47;
      FRAME_stand49     = 48;
      FRAME_stand50     = 49;
      FRAME_stand51     = 50;
      FRAME_stand52     = 51;
      FRAME_stand53     = 52;
      FRAME_stand54     = 53;
      FRAME_stand55     = 54;
      FRAME_stand56     = 55;
      FRAME_stand57     = 56;
      FRAME_stand58     = 57;
      FRAME_stand59     = 58;
      FRAME_stand60     = 59;
      FRAME_stand61     = 60;
      FRAME_stand62     = 61;
      FRAME_stand63     = 62;
      FRAME_stand64     = 63;
      FRAME_stand65     = 64;
      FRAME_stand66     = 65;
      FRAME_stand67     = 66;
      FRAME_stand68     = 67;
      FRAME_stand69     = 68;
      FRAME_stand70     = 69;
      FRAME_stand71     = 70;
      FRAME_stand72     = 71;
      FRAME_stand73     = 72;
      FRAME_stand74     = 73;
      FRAME_stand75     = 74;
      FRAME_stand76     = 75;
      FRAME_stand77     = 76;
      FRAME_stand78     = 77;
      FRAME_stand79     = 78;
      FRAME_stand80     = 79;
      FRAME_stand81     = 80;
      FRAME_stand82     = 81;
      FRAME_stand83     = 82;
      FRAME_stand84     = 83;
      FRAME_stand85     = 84;
      FRAME_stand86     = 85;
      FRAME_stand87     = 86;
      FRAME_stand88     = 87;
      FRAME_stand89     = 88;
      FRAME_stand90     = 89;
      FRAME_stand91     = 90;
      FRAME_stand92     = 91;
      FRAME_stand93     = 92;
      FRAME_stand94     = 93;
      FRAME_stand95     = 94;
      FRAME_stand96     = 95;
      FRAME_stand97     = 96;
      FRAME_stand98     = 97;
      FRAME_stand99     = 98;
      FRAME_stand100    = 99;
      FRAME_stand101    = 100;
      FRAME_stand102    = 101;
      FRAME_stand103    = 102;
      FRAME_stand104    = 103;
      FRAME_stand105    = 104;
      FRAME_stand106    = 105;
      FRAME_stand107    = 106;
      FRAME_stand108    = 107;
      FRAME_stand109    = 108;
      FRAME_stand110    = 109;
      FRAME_stand111    = 110;
      FRAME_stand112    = 111;
      FRAME_stand113    = 112;
      FRAME_stand114    = 113;
      FRAME_stand115    = 114;
      FRAME_stand116    = 115;
      FRAME_stand117    = 116;
      FRAME_stand118    = 117;
      FRAME_stand119    = 118;
      FRAME_stand120    = 119;
      FRAME_stand121    = 120;
      FRAME_stand122    = 121;
      FRAME_stand123    = 122;
      FRAME_stand124    = 123;
      FRAME_stand125    = 124;
      FRAME_stand126    = 125;
      FRAME_stand127    = 126;
      FRAME_stand128    = 127;
      FRAME_stand129    = 128;
      FRAME_stand130    = 129;
      FRAME_stand131    = 130;
      FRAME_stand132    = 131;
      FRAME_stand133    = 132;
      FRAME_stand134    = 133;
      FRAME_stand135    = 134;
      FRAME_stand136    = 135;
      FRAME_stand137    = 136;
      FRAME_stand138    = 137;
      FRAME_stand139    = 138;
      FRAME_stand140    = 139;
      FRAME_stand141    = 140;
      FRAME_stand142    = 141;
      FRAME_stand143    = 142;
      FRAME_stand144    = 143;
      FRAME_stand145    = 144;
      FRAME_stand146    = 145;
      FRAME_stand147    = 146;
      FRAME_stand148    = 147;
      FRAME_stand149    = 148;
      FRAME_stand150    = 149;
      FRAME_stand151    = 150;
      FRAME_stand152    = 151;
      FRAME_stand153    = 152;
      FRAME_stand154    = 153;
      FRAME_stand155    = 154;
      FRAME_stand156    = 155;
      FRAME_stand157    = 156;
      FRAME_stand158    = 157;
      FRAME_stand159    = 158;
      FRAME_stand160    = 159;
      FRAME_walk27      = 160;
      FRAME_walk28      = 161;
      FRAME_walk29      = 162;
      FRAME_walk30      = 163;
      FRAME_walk31      = 164;
      FRAME_walk32      = 165;
      FRAME_walk33      = 166;
      FRAME_walk34      = 167;
      FRAME_walk35      = 168;
      FRAME_walk36      = 169;
      FRAME_walk37      = 170;
      FRAME_walk38      = 171;
      FRAME_walk39      = 172;
      FRAME_walk1       = 173;
      FRAME_walk2       = 174;
      FRAME_walk3       = 175;
      FRAME_walk4       = 176;
      FRAME_walk5       = 177;
      FRAME_walk6       = 178;
      FRAME_walk7       = 179;
      FRAME_walk8       = 180;
      FRAME_walk9       = 181;
      FRAME_walk10      = 182;
      FRAME_walk11      = 183;
      FRAME_walk12      = 184;
      FRAME_walk13      = 185;
      FRAME_walk14      = 186;
      FRAME_walk15      = 187;
      FRAME_walk16      = 188;
      FRAME_walk17      = 189;
      FRAME_walk18      = 190;
      FRAME_walk19      = 191;
      FRAME_walk20      = 192;
      FRAME_walk21      = 193;
      FRAME_walk22      = 194;
      FRAME_walk23      = 195;
      FRAME_walk24      = 196;
      FRAME_walk25      = 197;
      FRAME_walk26      = 198;
      FRAME_st_pain2    = 199;
      FRAME_st_pain3    = 200;
      FRAME_st_pain4    = 201;
      FRAME_st_pain5    = 202;
      FRAME_st_pain6    = 203;
      FRAME_st_pain7    = 204;
      FRAME_st_pain8    = 205;
      FRAME_st_pain9    = 206;
      FRAME_st_pain10   = 207;
      FRAME_st_pain11   = 208;
      FRAME_st_pain12   = 209;
      FRAME_st_death2   = 210;
      FRAME_st_death3   = 211;
      FRAME_st_death4   = 212;
      FRAME_st_death5   = 213;
      FRAME_st_death6   = 214;
      FRAME_st_death7   = 215;
      FRAME_st_death8   = 216;
      FRAME_st_death9   = 217;
      FRAME_st_death10  = 218;
      FRAME_st_death11  = 219;
      FRAME_st_death12  = 220;
      FRAME_st_death13  = 221;
      FRAME_st_death14  = 222;
      FRAME_st_death15  = 223;
      FRAME_st_death16  = 224;
      FRAME_st_death17  = 225;
      FRAME_st_death18  = 226;
      FRAME_crawl1      = 227;
      FRAME_crawl2      = 228;
      FRAME_crawl3      = 229;
      FRAME_crawl4      = 230;
      FRAME_crawl5      = 231;
      FRAME_crawl6      = 232;
      FRAME_crawl7      = 233;
      FRAME_crawl8      = 234;
      FRAME_crawl9      = 235;
      FRAME_cr_pain2    = 236;
      FRAME_cr_pain3    = 237;
      FRAME_cr_pain4    = 238;
      FRAME_cr_pain5    = 239;
      FRAME_cr_pain6    = 240;
      FRAME_cr_pain7    = 241;
      FRAME_cr_pain8    = 242;
      FRAME_cr_pain9    = 243;
      FRAME_cr_pain10   = 244;
      FRAME_cr_death10  = 245;
      FRAME_cr_death11  = 246;
      FRAME_cr_death12  = 247;
      FRAME_cr_death13  = 248;
      FRAME_cr_death14  = 249;
      FRAME_cr_death15  = 250;
      FRAME_cr_death16  = 251;
      FRAME_cross1      = 252;
      FRAME_cross2      = 253;
      FRAME_cross3      = 254;
      FRAME_cross4      = 255;
      FRAME_cross5      = 256;
      FRAME_cross6      = 257;
      FRAME_cross7      = 258;
      FRAME_cross8      = 259;
      FRAME_cross9      = 260;
      FRAME_cross10     = 261;
      FRAME_cross11     = 262;
      FRAME_cross12     = 263;
      FRAME_cross13     = 264;
      FRAME_cross14     = 265;
      FRAME_cross15     = 266;
      FRAME_cross16     = 267;
      FRAME_cross17     = 268;
      FRAME_cross18     = 269;
      FRAME_cross19     = 270;
      FRAME_cross20     = 271;
      FRAME_cross21     = 272;
      FRAME_cross22     = 273;
      FRAME_cross23     = 274;
      FRAME_cross24     = 275;
      FRAME_cross25     = 276;
      FRAME_cross26     = 277;
      FRAME_cross27     = 278;
      FRAME_cross28     = 279;
      FRAME_cross29     = 280;
      FRAME_cross30     = 281;

      MODEL_SCALE       = 1.000000;
{;
delphi-note: end of m_insane.h
}

{/*
==============================================================================

insane

==============================================================================
*/}

var sound_fist: integer;
var sound_shake: integer;
var sound_moan: integer;
var sound_scream: array[0..8-1] of integer;

procedure insane_fist(self: edict_p); cdecl;
procedure insane_shake(self: edict_p); cdecl;
procedure insane_moan(self: edict_p); cdecl;
procedure insane_scream (self: edict_p); cdecl;

// below declarations eliminates the need for the forward void proc's in the C source
procedure insane_cross(self: edict_p); cdecl;
procedure insane_walk(self: edict_p); cdecl;
procedure insane_run(self: edict_p); cdecl;
procedure insane_pain(self: edict_p; other: edict_p; kick: single; damage: Integer); cdecl;
procedure insane_onground(self: edict_p); cdecl;
procedure insane_checkdown(self: edict_p); cdecl;
procedure insane_checkup(self: edict_p); cdecl;
procedure insane_stand(self: edict_p); cdecl;
procedure insane_dead(self: edict_p); cdecl;
procedure insane_die(self: edict_p; inflictor: edict_p; attacker: edict_p; damage: Integer; const point: vec3_t); cdecl;
procedure SP_misc_insane(self: edict_p); cdecl;

implementation

uses g_ai, g_main, q_shared, game_add, GameUnit, g_local_add, g_misc,
  g_utils, g_monster, CPas;

const
  insane_frames_stand_normal : array [0..5] of mframe_t = (
    (aifunc: ai_stand; dist: 0; thinkfunc: nil),
    (aifunc: ai_stand; dist: 0; thinkfunc: nil),
    (aifunc: ai_stand; dist: 0; thinkfunc: nil),
    (aifunc: ai_stand; dist: 0; thinkfunc: nil),
    (aifunc: ai_stand; dist: 0; thinkfunc: nil),
    (aifunc: ai_stand; dist: 0; thinkfunc: insane_checkdown));

  insane_move_stand_normal : mmove_t = (firstframe: FRAME_stand60; lastframe:FRAME_stand65; frame:@insane_frames_stand_normal;
    endfunc: insane_stand);

  insane_frames_stand_insane : array [0..29] of mframe_t = (
    (aifunc: ai_stand; dist: 0; thinkfunc: insane_shake),
    (aifunc: ai_stand; dist: 0; thinkfunc: nil),
    (aifunc: ai_stand; dist: 0; thinkfunc: nil),
    (aifunc: ai_stand; dist: 0; thinkfunc: nil),
    (aifunc: ai_stand; dist: 0; thinkfunc: nil),
    (aifunc: ai_stand; dist: 0; thinkfunc: nil),
    (aifunc: ai_stand; dist: 0; thinkfunc: nil),
    (aifunc: ai_stand; dist: 0; thinkfunc: nil),
    (aifunc: ai_stand; dist: 0; thinkfunc: nil),
    (aifunc: ai_stand; dist: 0; thinkfunc: nil),

    (aifunc: ai_stand; dist: 0; thinkfunc: nil),
    (aifunc: ai_stand; dist: 0; thinkfunc: nil),
    (aifunc: ai_stand; dist: 0; thinkfunc: nil),
    (aifunc: ai_stand; dist: 0; thinkfunc: nil),
    (aifunc: ai_stand; dist: 0; thinkfunc: nil),
    (aifunc: ai_stand; dist: 0; thinkfunc: nil),
    (aifunc: ai_stand; dist: 0; thinkfunc: nil),
    (aifunc: ai_stand; dist: 0; thinkfunc: nil),
    (aifunc: ai_stand; dist: 0; thinkfunc: nil),
    (aifunc: ai_stand; dist: 0; thinkfunc: nil),

    (aifunc: ai_stand; dist: 0; thinkfunc: nil),
    (aifunc: ai_stand; dist: 0; thinkfunc: nil),
    (aifunc: ai_stand; dist: 0; thinkfunc: nil),
    (aifunc: ai_stand; dist: 0; thinkfunc: nil),
    (aifunc: ai_stand; dist: 0; thinkfunc: nil),
    (aifunc: ai_stand; dist: 0; thinkfunc: nil),
    (aifunc: ai_stand; dist: 0; thinkfunc: nil),
    (aifunc: ai_stand; dist: 0; thinkfunc: nil),
    (aifunc: ai_stand; dist: 0; thinkfunc: nil),
    (aifunc: ai_stand; dist: 0; thinkfunc: insane_checkdown));

  insane_move_stand_insane : mmove_t = (firstframe: FRAME_stand65; lastframe:FRAME_stand94; frame:@insane_frames_stand_insane;
    endfunc: insane_stand);

  insane_frames_uptodown : array [0..39] of mframe_t = (
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: insane_moan),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),

    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),

    (aifunc: ai_move; dist: 2.7; thinkfunc: nil),
    (aifunc: ai_move; dist: 4.1; thinkfunc: nil),
    (aifunc: ai_move; dist: 6; thinkfunc: nil),
    (aifunc: ai_move; dist: 7.6; thinkfunc: nil),
    (aifunc: ai_move; dist: 3.6; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: insane_fist),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),

    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: insane_fist),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil));

  insane_move_uptodown : mmove_t = (firstframe: FRAME_stand1; lastframe:FRAME_stand40; frame:@insane_frames_uptodown;
    endfunc: insane_onground);

  insane_frames_downtoup : array [0..18] of mframe_t = (
    (aifunc: ai_move; dist: -0.7; thinkfunc: nil), // 41
    (aifunc: ai_move; dist: -1.2; thinkfunc: nil), // 42
    (aifunc: ai_move; dist: -1.5; thinkfunc: nil), // 43
    (aifunc: ai_move; dist: -4.5; thinkfunc: nil), // 44
    (aifunc: ai_move; dist: -3.5; thinkfunc: nil), // 45
    (aifunc: ai_move; dist: -0.2; thinkfunc: nil), // 46
    (aifunc: ai_move; dist: 0; thinkfunc: nil), // 47
    (aifunc: ai_move; dist: -1.3; thinkfunc: nil), //48
    (aifunc: ai_move; dist: -3; thinkfunc: nil), // 49
    (aifunc: ai_move; dist: -2; thinkfunc: nil), // 50

    (aifunc: ai_move; dist: 0; thinkfunc: nil), // 51
    (aifunc: ai_move; dist: 0; thinkfunc: nil), // 52
    (aifunc: ai_move; dist: 0; thinkfunc: nil), // 53
    (aifunc: ai_move; dist: -3.3; thinkfunc: nil), // 54
    (aifunc: ai_move; dist: 1.6; thinkfunc: nil), // 55
    (aifunc: ai_move; dist: -0.3; thinkfunc: nil), // 56
    (aifunc: ai_move; dist: 0; thinkfunc: nil), //57
    (aifunc: ai_move; dist: 0; thinkfunc: nil), //58
    (aifunc: ai_move; dist: 0; thinkfunc: nil)); // 59

  insane_move_downtoup : mmove_t = (firstframe: FRAME_stand41; lastframe:FRAME_stand59; frame:@insane_frames_downtoup;
    endfunc: insane_stand);

  insane_frames_jumpdown : array [0..4] of mframe_t = (
    (aifunc: ai_move; dist: 0.2; thinkfunc: nil),
    (aifunc: ai_move; dist: 11.5; thinkfunc: nil),
    (aifunc: ai_move; dist: 5.1; thinkfunc: nil),
    (aifunc: ai_move; dist: 7.1; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil));

  insane_move_jumpdown: mmove_t = (firstframe: FRAME_stand96; lastframe:FRAME_stand100; frame:@insane_frames_jumpdown;
    endfunc: insane_onground);

  insane_frames_down : array [0..60] of mframe_t = (
    (aifunc: ai_move; dist: 0; thinkfunc: nil), // 100
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),

    (aifunc: ai_move; dist: 0; thinkfunc: nil), // 110
    (aifunc: ai_move; dist: -1.7; thinkfunc: nil),
    (aifunc: ai_move; dist: -1.6; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: insane_fist),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),

    (aifunc: ai_move; dist: 0; thinkfunc: nil), // 120
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),

    (aifunc: ai_move; dist: 0; thinkfunc: nil), // 130
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: insane_moan),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),

    (aifunc: ai_move; dist: 0; thinkfunc: nil), // 140
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),

    (aifunc: ai_move; dist: 0; thinkfunc: nil), // 150
    (aifunc: ai_move; dist: 0.5; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: -0.2; thinkfunc: insane_scream),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0.2; thinkfunc: nil),
    (aifunc: ai_move; dist: 0.4; thinkfunc: nil),
    (aifunc: ai_move; dist: 0.6; thinkfunc: nil),
    (aifunc: ai_move; dist: 0.8; thinkfunc: nil),
    (aifunc: ai_move; dist: 0.7; thinkfunc: nil),

    (aifunc: ai_move; dist: 0; thinkfunc: insane_checkup)); // 160

  insane_move_down: mmove_t = (firstframe: FRAME_stand100; lastframe:FRAME_stand160; frame:@insane_frames_down;
    endfunc: insane_onground);

  insane_frames_walk_normal: array [0..12] of mframe_t = (
    (aifunc: ai_walk; dist: 0; thinkfunc: insane_scream),
    (aifunc: ai_walk; dist: 2.5; thinkfunc: nil),
    (aifunc: ai_walk; dist: 3.5; thinkfunc: nil),
    (aifunc: ai_walk; dist: 1.7; thinkfunc: nil),
    (aifunc: ai_walk; dist: 2.3; thinkfunc: nil),
    (aifunc: ai_walk; dist: 2.4; thinkfunc: nil),
    (aifunc: ai_walk; dist: 2.2; thinkfunc: nil),
    (aifunc: ai_walk; dist: 4.2; thinkfunc: nil),
    (aifunc: ai_walk; dist: 5.6; thinkfunc: nil),
    (aifunc: ai_walk; dist: 3.3; thinkfunc: nil),

    (aifunc: ai_walk; dist: 2.4; thinkfunc: nil),
    (aifunc: ai_walk; dist: 0.9; thinkfunc: nil),
    (aifunc: ai_walk; dist: 0; thinkfunc: nil));

  insane_move_walk_normal: mmove_t = (firstframe: FRAME_walk27; lastframe:FRAME_walk39; frame:@insane_frames_walk_normal;
    endfunc: insane_walk);

  insane_move_run_normal: mmove_t = (firstframe: FRAME_walk27; lastframe:FRAME_walk39; frame:@insane_frames_walk_normal;
    endfunc: insane_run);

  insane_frames_walk_insane: array [0..25] of mframe_t = (
    (aifunc: ai_walk; dist: 0; thinkfunc: insane_scream), // walk 1
    (aifunc: ai_walk; dist: 3.4; thinkfunc: nil), // walk 2
    (aifunc: ai_walk; dist: 3.6; thinkfunc: nil), // walk 3
    (aifunc: ai_walk; dist: 2.9; thinkfunc: nil), // walk 4
    (aifunc: ai_walk; dist: 2.2; thinkfunc: nil), // walk 5
    (aifunc: ai_walk; dist: 2.6; thinkfunc: nil), // walk 6
    (aifunc: ai_walk; dist: 0; thinkfunc: nil), // walk 7
    (aifunc: ai_walk; dist: 0.7; thinkfunc: nil), // walk 8
    (aifunc: ai_walk; dist: 4.8; thinkfunc: nil), // walk 9
    (aifunc: ai_walk; dist: 5.3; thinkfunc: nil), // walk 10

    (aifunc: ai_walk; dist: 1.1; thinkfunc: nil), // walk 11
    (aifunc: ai_walk; dist: 2; thinkfunc: nil), // walk 12
    (aifunc: ai_walk; dist: 0.5; thinkfunc: nil), // walk 13
    (aifunc: ai_walk; dist: 0; thinkfunc: nil), // walk 14
    (aifunc: ai_walk; dist: 0; thinkfunc: nil), // walk 15
    (aifunc: ai_walk; dist: 4.9; thinkfunc: nil), // walk 16
    (aifunc: ai_walk; dist: 6.7; thinkfunc: nil), // walk 17
    (aifunc: ai_walk; dist: 3.8; thinkfunc: nil), // walk 18
    (aifunc: ai_walk; dist: 2; thinkfunc: nil), // walk 19
    (aifunc: ai_walk; dist: 0.2; thinkfunc: nil), // walk 20

    (aifunc: ai_walk; dist: 0; thinkfunc: nil), // walk 21
    (aifunc: ai_walk; dist: 3.4; thinkfunc: nil), // walk 22
    (aifunc: ai_walk; dist: 6.4; thinkfunc: nil), // walk 23
    (aifunc: ai_walk; dist: 5; thinkfunc: nil), // walk 24
    (aifunc: ai_walk; dist: 1.8; thinkfunc: nil), // walk 25
    (aifunc: ai_walk; dist: 0; thinkfunc: nil)); // walk 26

  insane_move_walk_insane: mmove_t = (firstframe: FRAME_walk27; lastframe:FRAME_walk39; frame:@insane_frames_walk_insane;
    endfunc: insane_walk);

  insane_move_run_insane: mmove_t = (firstframe: FRAME_walk27; lastframe:FRAME_walk39; frame:@insane_frames_walk_insane;
    endfunc: insane_run);

  insane_frames_stand_pain: array [0..10] of mframe_t = (
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),

    (aifunc: ai_move; dist: 0; thinkfunc: nil));

  insane_move_stand_pain: mmove_t = (firstframe: FRAME_st_pain2; lastframe:FRAME_st_pain12; frame:@insane_frames_stand_pain;
    endfunc: insane_run);

  insane_frames_stand_death: array [0..15] of mframe_t = (
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),

    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil));

  insane_move_stand_death: mmove_t = (firstframe: FRAME_st_death2; lastframe:FRAME_st_death18; frame:@insane_frames_stand_death;
    endfunc: insane_dead);

  insane_frames_crawl: array [0..8] of mframe_t = (
    (aifunc: ai_walk; dist: 0; thinkfunc: insane_scream),
    (aifunc: ai_walk; dist: 1.5; thinkfunc: nil),
    (aifunc: ai_walk; dist: 2.1; thinkfunc: nil),
    (aifunc: ai_walk; dist: 3.6; thinkfunc: nil),
    (aifunc: ai_walk; dist: 2; thinkfunc: nil),
    (aifunc: ai_walk; dist: 0.9; thinkfunc: nil),
    (aifunc: ai_walk; dist: 3; thinkfunc: nil),
    (aifunc: ai_walk; dist: 3.4; thinkfunc: nil),
    (aifunc: ai_walk; dist: 2.4; thinkfunc: nil));

  insane_move_crawl: mmove_t = (firstframe: FRAME_crawl1; lastframe:FRAME_crawl9; frame:@insane_frames_crawl;
    endfunc: nil);

  insane_move_runcrawl: mmove_t = (firstframe: FRAME_crawl1; lastframe:FRAME_crawl9; frame:@insane_frames_crawl;
    endfunc: nil);

  insane_frames_crawl_pain: array [0..8] of mframe_t = (
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil));

  insane_move_crawl_pain: mmove_t = (firstframe: FRAME_cr_pain2; lastframe:FRAME_cr_pain10; frame:@insane_frames_crawl_pain;
    endfunc: insane_run);

  insane_frames_crawl_death: array [0..6] of mframe_t = (
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil));

  insane_move_crawl_death: mmove_t = (firstframe: FRAME_cr_death10; lastframe:FRAME_cr_death16; frame:@insane_frames_crawl_death;
    endfunc: insane_run);

  insane_frames_cross: array [0..14] of mframe_t = (
    (aifunc: ai_move; dist: 0; thinkfunc: insane_moan),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),

    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil));

  insane_move_cross: mmove_t = (firstframe: FRAME_cross1; lastframe:FRAME_cross15; frame:@insane_frames_cross;
    endfunc: insane_cross);

  insane_frames_struggle_cross: array [0..14] of mframe_t = (
    (aifunc: ai_move; dist: 0; thinkfunc: insane_scream),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),

    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil),
    (aifunc: ai_move; dist: 0; thinkfunc: nil));

  insane_move_struggle_cross: mmove_t = (firstframe: FRAME_cross16; lastframe:FRAME_cross30; frame:@insane_frames_struggle_cross;
    endfunc: insane_cross);

procedure insane_fist(self: edict_p);
begin
  gi.sound(self, CHAN_VOICE, sound_fist, 1, ATTN_IDLE, 0);
end;

procedure insane_shake(self: edict_p);
begin
  gi.sound(self, CHAN_VOICE, sound_shake, 1, ATTN_IDLE, 0);
end;

procedure insane_moan(self: edict_p);
begin
  gi.sound(self, CHAN_VOICE, sound_moan, 1, ATTN_IDLE, 0);
end;

procedure insane_scream (self: edict_p);
begin
  gi.sound(self, CHAN_VOICE, sound_scream[rand() mod 8], 1, ATTN_IDLE, 0);
end;

procedure insane_cross(self: edict_p);
begin
  if (_random() < 0.8) then
    self^.monsterinfo.currentmove:= @insane_move_cross
  else
    self^.monsterinfo.currentmove:= @insane_move_struggle_cross;
end;

procedure insane_walk(self: edict_p);
begin
  if (self^.spawnflags and 16) <> 0 then // Hold Ground?
    if (self^.s.frame = FRAME_cr_pain10) then begin
      self^.monsterinfo.currentmove:= @insane_move_down;
      exit;
    end;
  if (self^.spawnflags and 4) <> 0 then self^.monsterinfo.currentmove:= @insane_move_crawl
  else
    if (_random() <= 0.5) then
      self^.monsterinfo.currentmove:= @insane_move_walk_normal
    else
      self^.monsterinfo.currentmove:= @insane_move_walk_insane;
end;

procedure insane_run(self: edict_p);
begin
  if (self^.spawnflags and 16) <> 0 then // Hold Ground?
    if (self^.s.frame = FRAME_cr_pain10) then begin
      self^.monsterinfo.currentmove := @insane_move_down;
      exit;
    end;
  if (self^.spawnflags and 4) <> 0  then // Crawling?
    self^.monsterinfo.currentmove:= @insane_move_runcrawl
  else
    if (_random() <= 0.5) then   // Else, mix it up
      self^.monsterinfo.currentmove:= @insane_move_run_normal
    else
      self^.monsterinfo.currentmove:= @insane_move_run_insane;
end;

procedure insane_pain(self: edict_p; other: edict_p; kick: single; damage: integer);
var
l, r: integer;
begin
//  if (self->health < (self->max_health / 2))
//    self->s.skinnum = 1;

  if (level.time < self^.pain_debounce_time) then exit;

  self^.pain_debounce_time:= level.time + 3;

  r:= 1 + (rand() and 1);
  if (self^.health < 25) then
    l:= 25
  else if (self^.health < 50) then
    l:= 50
  else if (self^.health < 75) then
    l:= 75
  else l:= 100;

  gi.sound(self, CHAN_VOICE, gi.soundindex (va('player/male/pain%i_%i.wav', [l, r])), 1, ATTN_IDLE, 0);

  if (skill^.value = 3) then exit;    // no pain anims in nightmare

  // Don't go into pain frames if crucified.
  if (self^.spawnflags and 8) <> 0 then begin
    self^.monsterinfo.currentmove := @insane_move_struggle_cross;
    exit;
  end;

  if  ( ((self^.s.frame >= FRAME_crawl1) and (self^.s.frame <= FRAME_crawl9)) or ((self^.s.frame >= FRAME_stand99) and (self^.s.frame <= FRAME_stand160)) ) then begin
    self^.monsterinfo.currentmove := @insane_move_crawl_pain;
  end else self^.monsterinfo.currentmove := @insane_move_stand_pain;

end;

procedure insane_onground(self: edict_p);
begin
  self^.monsterinfo.currentmove := @insane_move_down;
end;

procedure insane_checkdown(self: edict_p);
begin
//  if ( (self.s.frame == FRAME_stand94) || (self.s.frame == FRAME_stand65) )
  if (Self.spawnflags and 32) <> 0 then
    exit;        // Always stand
  if (_random() < 0.3) then
    if (_random() < 0.5) then
      self^.monsterinfo.currentmove:= @insane_move_uptodown
    else
      self^.monsterinfo.currentmove:= @insane_move_jumpdown;
end;

procedure insane_checkup(self: edict_p);
begin
  // If Hold_Ground and Crawl are set
  if ((self^.spawnflags and 4) and (self^.spawnflags and 16)) <> 0 then exit;
  if (_random() < 0.5) then
    self^.monsterinfo.currentmove := @insane_move_downtoup;

end;

procedure insane_stand(self: edict_p);
begin
  if (self^.spawnflags and 8) <> 0 then begin      // If crucified
    self^.monsterinfo.currentmove:= @insane_move_cross;
    self^.monsterinfo.aiflags:= self^.monsterinfo.aiflags or AI_STAND_GROUND;
  end
  // If Hold_Ground and Crawl are set
  else if ((self^.spawnflags and 4) and (self^.spawnflags and 16)) <> 0 then
    self^.monsterinfo.currentmove:= @insane_move_down
  else
    if (_random() < 0.5) then
      self^.monsterinfo.currentmove := @insane_move_stand_normal
    else self^.monsterinfo.currentmove:= @insane_move_stand_insane;
end;

procedure insane_dead(self: edict_p);
begin
  if (self.spawnflags and 8) <> 0 then begin
    self^.flags:= self^.flags or FL_FLY;
  end else begin
    VectorSet(self^.mins, -16, -16, -24);
    VectorSet(self^.maxs, 16, 16, -8);
    self^.movetype := MOVETYPE_TOSS;
  end;

  self^.svflags:= self^.svflags or SVF_DEADMONSTER;
  self^.nextthink:= 0;
  gi.linkentity(self);
end;

procedure insane_die(self: edict_p; inflictor: edict_p; attacker: edict_p; damage: Integer; const point: vec3_t);
var
n: integer;
begin
  if (self^.health <= self^.gib_health) then begin
    gi.sound(self, CHAN_VOICE, gi.soundindex('misc/udeath.wav'), 1, ATTN_IDLE, 0);
    for n:= 0 to 1 do
      ThrowGib(self, 'models/objects/gibs/bone/tris.md2', damage, GIB_ORGANIC);
    for n:= 0 to 3 do
      ThrowGib (self, 'models/objects/gibs/sm_meat/tris.md2', damage, GIB_ORGANIC);

    ThrowHead (self, 'models/objects/gibs/head2/tris.md2', damage, GIB_ORGANIC);
    self^.deadflag:= DEAD_DEAD;
    exit;
  end;

  if (self^.deadflag = DEAD_DEAD) then exit;

  gi.sound(self, CHAN_VOICE, gi.soundindex(va('player/male/death%i.wav', [(rand() mod 4)+1])), 1, ATTN_IDLE, 0);

  self^.deadflag:= DEAD_DEAD;
  self^.takedamage:= DAMAGE_YES;

  if (self^.spawnflags and 8) <> 0 then begin
    insane_dead(self);
  end else begin
    if (((self^.s.frame >= FRAME_crawl1) and (self^.s.frame <= FRAME_crawl9)) or ((self.s.frame >= FRAME_stand99) and (self.s.frame <= FRAME_stand160))) then
      self.monsterinfo.currentmove := @insane_move_crawl_death
    else
      self^.monsterinfo.currentmove := @insane_move_stand_death;
  end;
end;

{/*QUAKED misc_insane (1 .5 0) (-16 -16 -24) (16 16 32) Ambush Trigger_Spawn CRAWL CRUCIFIED STAND_GROUND ALWAYS_STAND
*/}
procedure SP_misc_insane(self: edict_p);
begin
//  static int skin = 0;  //@@

  if (deathmatch^.Value <> 0) then
  begin
    G_FreeEdict(self);
    exit;
  end;

  sound_fist:= gi.soundindex ('insane/insane11.wav');
  sound_shake:= gi.soundindex ('insane/insane5.wav');
  sound_moan:= gi.soundindex ('insane/insane7.wav');
  sound_scream[0]:= gi.soundindex ('insane/insane1.wav');
  sound_scream[1]:= gi.soundindex ('insane/insane2.wav');
  sound_scream[2]:= gi.soundindex ('insane/insane3.wav');
  sound_scream[3]:= gi.soundindex ('insane/insane4.wav');
  sound_scream[4]:= gi.soundindex ('insane/insane6.wav');
  sound_scream[5]:= gi.soundindex ('insane/insane8.wav');
  sound_scream[6]:= gi.soundindex ('insane/insane9.wav');
  sound_scream[7]:= gi.soundindex ('insane/insane10.wav');

  self^.movetype:= MOVETYPE_STEP;
  self^.solid:= SOLID_BBOX;
  self^.s.modelindex:= gi.modelindex('models/monsters/insane/tris.md2');

  VectorSet(self^.mins, -16, -16, -24);
  VectorSet(self^.maxs, 16, 16, 32);

  self^.health := 100;
  self^.gib_health := -50;
  self^.mass := 300;

  self^.pain := insane_pain;
  self^.die := insane_die;

  self^.monsterinfo.stand:= insane_stand;
  self^.monsterinfo.walk:= insane_walk;
  self^.monsterinfo.run:= insane_run;
  self^.monsterinfo.dodge:= nil;
  self^.monsterinfo.attack:= nil;
  self^.monsterinfo.melee:= nil;
  self^.monsterinfo.sight:= nil;
  self^.monsterinfo.aiflags:= self^.monsterinfo.aiflags or AI_GOOD_GUY;

//@@
//  self.s.skinnum = skin;
//  skin++;
//  if (skin > 12)
//    skin = 0;

  gi.linkentity(self);

  if (self^.spawnflags and 16) <> 0 then        // Stand Ground
    self^.monsterinfo.aiflags:= self^.monsterinfo.aiflags or AI_STAND_GROUND;

  self^.monsterinfo.currentmove:= @insane_move_stand_normal;
  
  self^.monsterinfo.scale:= MODEL_SCALE;

  if (Self.spawnflags and 8) <> 0 then begin          // Crucified ?
    VectorSet(self^.mins, -16, 0, 0);
    VectorSet(self^.maxs, 16, 8, 32);
    self^.flags:= self^.flags or FL_NO_KNOCKBACK;
    flymonster_start(self);
  end else begin
    walkmonster_start(self);
    self^.s.skinnum:= rand() mod 3;
  end;
end;

end.
